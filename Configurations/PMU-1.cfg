/*
// File : PMU-1.cfg
//
// Changelog 
//
// 2022-01-24 Demonstrate variations on a theme of looking at statistics via the web server
//            Derived from -1.cfg of the same prefix
//
*/
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
	// PMU target is 10kHz ; 6kHz min if necessary.
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 10000
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32           
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
            }
        }
	//
	// Data Ingress : expected to be 10kHz mains voltage/current waveform(s)
	//
	// We run at least at 100Hz
	//
	// Assumptions on signals
	//
	// PMU algorithm below is assuming that previous blocks handle the following
	//
	// 1) All low-level transport is abstracted (UART / network / ....)
	//
	// 2) Data has been resampled to a calibrated UTC timebase
	//
	// 3) Raw data is the ADC 16 bit values.
	// 
	// Max likely channels in 3 phase * current + voltage + a few spares (say 16)
	//
	// Typical : 2 (voltage + current)
	//
	// Data rate = 16 bit * 10kHz * 16 channel 320kB/s
	//
	// All "raw" data to be recorded.
	//
	// 
	+RawAdcData = {
		Class = PMU::SnapShot
		nOfChannels = 16 // SnapShot class supports up to SnapShotMaxChannels
		InputSignals = {
			DataSource = STM32Adc
			Type = TBA
		}
		Output = {
			Voltage1 = {
				DataSource = DDB1
				Type = Float
			}
			Current1 = {
				DataSource = DDB1
				Type = Float
			}
	}
	
	//
	//
	// Optional Component : positive sequence 
	//
	// Something like an average of 3 phase signals
	//
	//

	+PositiveSequence = {
		Class = PositiveSequenceGAM
	
		// ....
		OutputSignals = { 
			PositiveSignal_1 = {
				//...
			}
		}	

	}
	
	//		
	// Algorithm : FFT analysis 
	//
	// We apply the real FFT to a 
	//
	// Sometimes assume that from 3 phase we will derive an intermediate signal.
	//
	// fftw gives arrays of amplitude, frequency, power, phase
	//
	// the max array size (frequency resolution is nSamples/2)
	//
	// e.g. At 100Hz/10kHz ADC sampling we have 100 new samples per timestep
	//
	// We may elect to have N buffers of "old" 100 samples and run FFT over
	// arbitrary windows of this data, per channel
	//      
	// e.g. 200 samples to process per 0.1ms gives 100 FFT coefficients * 4
	//
	// For Phase/Amplitude : pick out the 50Hz component (samplingFreq/N)
	//
	// PMU in general will have to compute the frequency
	//
	// from the evolving phase
	//
	// In practice (see standard) - frequency band
	//
	// 
	// FFT resolution is samplingFreq/signalSamples * 50  (to refine this definition)
	//
	//
	// User needs to select alternative window lengths via nOfSamples parameter
	//
	// This only needs to be changed BETWEEN runs.
	//	
	///
	// FFT Filter / Windows
	//
	// Triangle filter / Triangle window concept (from the IEEE standard)
	//
	// 2 cycle weighted triangle filter
	//
	// Piecewise linear function : applied as a filter
	//
	// Could use Gaussian window 
	//
	// Handles things like extrapolating the data to improve time resolution
	//
	//
	// However : classes of device might want to specify the window  
	//
	// e.g. if producing a PMU output every 10ms - 100Hz = 2 samples per cycle at 50Hz.
	//

	//
	// Simulink options : 
	//
	// 
	//
	+Voltage1_FFT = {
		Class = Phase_Amplitude_FFTGAM
		nOfSamples = 200     // Could be fixed for the lifetime of the application run, or dynamic TBA ?
		nOfSamples = 400
		targetHarmonic = 50  // Hz
		nthHarmonic = 1 //   better way to express.j
		filterType = [Triangle|Gaussian|....] // To specify : filter type
		filterParameterA = 500 //	
		filter
		
		InputSignals = {
			// PositiveSequence1  (if using the positive signal version) 
			Voltage1 = {
				DataSource = DDB1
				Type = Float
			}
		}
		OutputSignals = {

			Voltage1_Amplitude = { }
			Voltage1_Phase = {}
			// DataSource = DDB1
		}
	}
	//
	//
	// Now store the Amplitude/Phase to Comtrade 
	//
	// Also time, frequency rocof (rate of change of frequency), phase, amplitude.
	//	
	// ACTIONS
	//
	// 1. AS to summarise this specification.
	// 2. AS to work on an implementation of the above with the software team.
	// 3. PI - consider if the matlab codes can be shared
	// 4. PI - to find out more about simulink generated code integration.
	// 5. 
	//

	Channel1 = {
		Class PMU::RawChannel
	}
	+Channel2 = {
		Class PMU::RawChannel
	}


        +Waveform0 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 50.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                MainsF = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform1 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.5
            Frequency = 100.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains2F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform2 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.25
            Frequency = 150
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains3F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform3 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.125
            Frequency = 200
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains4F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMPerformanceWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = Timings
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = Timings
                    Type = uint32           
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = PerformanceWriter
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = PerformanceWriter 
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
            }
        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                MainsF = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains2F = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains3F = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains4F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                MainsF = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains2F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains3F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains4F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +SignalsWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/var/tmp/STapp-0004-3-signals.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = uint32
                }
                MainsF = {
                    Type = float64
                }
                Mains2F = {
                    Type = float64
                }
                Mains3F = {
                    Type = float64
                }
                Mains4F = {
                    Type = float64
                }
            }
        }
        +PerformanceWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/var/tmp/STapp-0004-3-performance.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    Type = uint32
                } 
                Run_Thread1_CycleTime = {
                    Type = uint32
                }
                GAMTimer_ReadTime = {
                    Type = uint32
                }
                GAMTimer_ExecTime = {
                    Type = uint32
                }
                GAMTimer_WriteTime = {
                    Type = uint32
                }
                GAMPerformanceWriter_WriteTime = {
                    Type = uint32
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3}
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3 GAMSignalsWriter GAMPerformanceWriter}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
